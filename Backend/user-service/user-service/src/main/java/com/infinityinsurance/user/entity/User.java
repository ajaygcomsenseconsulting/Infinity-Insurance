package com.infinityinsurance.user.entity;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/**
 * Entity representing a User in the system.
 * This class maps to the "users" table in the database.
 */
@Entity
@Getter
@Setter
@NoArgsConstructor
@ToString
@Table(name = "users")  // Specifies the table name in the database
public class User{
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
     * The primary key of the User entity.
     * This value will be automatically generated using an auto-increment strategy.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Auto-generated by the database (e.g., auto-increment)
    private Long id;
    
    /**
     * Full name of the user.
     * This field is mandatory (cannot be null).
     */
    @Column(nullable = false)
    private String fullName;
    
    private List<String> roles;
    
    /**
     * Username of the user.
     * This field is mandatory and must be unique across the system.
     */
    @Column(nullable = false, unique = true)
    private String username;
    
    /**
     * Email address of the user.
     * This field is mandatory and must be unique.
     */
    @Column(nullable = false, unique = true)
    private String email;
    
    /**
     * The password used by the user to authenticate.
     * This field is mandatory.
     */
    @Column(nullable = false)
    private String password;
    
    /**
     * The phone number of the user.
     * This field is mandatory.
     */
    @Column(nullable = false)
    private String phone;
    
    /**
     * The status indicating whether the user is enabled or not.
     * A user is enabled by default when created.
     * This field is optional and can be set to false for deactivating the user.
     */
    @Column
    private boolean isEnabled = true;
    
    /**
     * Timestamp indicating when the user was created.
     * This field is automatically set to the current date and time when a new user is created.
     * The column is mandatory and cannot be null.
     */
    @Column(nullable = false)
    private LocalDateTime createdAt = LocalDateTime.now();  // Default value is the current timestamp

//    @Override
//    public Collection<? extends GrantedAuthority> getAuthorities() {
//        // Convert the list of roles into GrantedAuthority objects
//        return roles.stream()
//                    .map(role -> new SimpleGrantedAuthority("ROLE_" + role))
//                    .collect(Collectors.toList());
//    }
//
//	@Override
//	public boolean isAccountNonExpired() {
//		// TODO Auto-generated method stub
//		return UserDetails.super.isAccountNonExpired();
//	}
//
//	@Override
//	public boolean isAccountNonLocked() {
//		// TODO Auto-generated method stub
//		return UserDetails.super.isAccountNonLocked();
//	}
//
//	@Override
//	public boolean isCredentialsNonExpired() {
//		// TODO Auto-generated method stub
//		return UserDetails.super.isCredentialsNonExpired();
//	}
//	
	
}
